
							  #######################	
							  # I/O in C# Made Easy #
							  #######################
								

        Object
	   |
	   \
	    |
	    |----TextReader(Abstract) ---> Character Based IO (For Reading....)
	    |		|
            |		 \
  	    |		 |-----StreamReader
	    |		 `-----StringReader	
	    |
            |----TextWriter(Abstract) ---> Character Based IO (For Writing....)
	    |		|
	    |		 \
	    |		 |-----StreamWriter
	    |		 `-----StringWriter 	
	    |
	    |----Stream(Abstract)  ---> Byte Oriented IO   
            |       |
	    |	     \
	    |		 |-----FileStream
	    |		 |-----BufferedStream
	    |	 	 `-----MemoryStream
	    |
            |----BinaryReader------\
	    |	        	    |-->Binary IO used to read primitive data types(int,char..)	
            `----BinaryWriter------/


These Classes are from System.IO namespace.
So make sure you include it before doing IO programs.
#################################################################################
Reading Plain Text 
	1.Use StreamReader with path to the file as argument.
	2.Use ReadLine() Method to read each line in the given file.
        3.repeat step 2 until ReadLine() Method return 'null' indicating end of File(or check for !sr.EndOfStream)
	4.Close the StreamReader at the end.

Writing Plain Text 
	1.Use StreamWriter with path to the file as argument.
	2.Use WriteLine("....") Method to write each line to the given file.
	3.repeat step 2 until there is no data to write.
	4.Close the StreamWriter at the end.

example:-
---------
class IOStreams
{
	static void Main()
	{
		//Writing
		StreamWriter sw = new StreamWriter(@"d:\a.txt");
		sw.WriteLine("Hai I am Vineel...");
		sw.WriteLine("This is from C#");
		sw.Close();

		//Reading
		StreamReader sr = new StreamReader(@"d:\a.txt");
		Console.WriteLine(sr.ReadLine());
		Console.WriteLine(sr.ReadLine());
		sr.Close();
	}
}
#################################################################################
To Read Chunks of bytes from a file (ex:- reading few bytes from an exe file...)
    1.Use FileStream class with first parameter to contructor as file path(as string) 
      and second parameter as FileMode (Open,Create,Append,Truncate...).
    2.Create an array of bytes with some size (say 1024 ...) 
    3.Pass this array to Read Method as fs.Read(byte[],offset,count); where
      byte[] indicates byte array created, offset indicates from where the array
      should be started filling(in most cases it is Zero) and count indicates 
      number bytes to be copied.In this case it is 1024(it can be any thing 
      not necesserely 1024);
    4.When above read Method is executed you will have byte array filled with the read 
      data.If nothing is read in to array Read method returns zero(with which we can 
      conclude that we have reached end of file..).The return value always indicates 
      number of byte read in to the array.(This is not always equal to count value we have
      passed .For more clarity read last section in this tutorial....)
    5.If you want read once again repeat step 3
    6.Close the FileStream at the end.
**************THIS IS EXACTLY SIMILAR TO read SYSTEM CALL IN LINUX****************
To Write Chunks of bytes to a file (ex:- Writing few bytes to an exe file...)
    1.Use FileStream class with first parameter to contructor as file path(as string) 
      and second parameter as FileMode (Open,Create,Append,Truncate...).
    2.Create an array of bytes with some size (say 1024 ...) and fill it with some bytes.
    3.Pass this array to Write Method as fs.Write(byte[],offset,count); where
      byte[] indicates byte array created, offset indicates from which offset of the array
      the bytes should be copied(in most cases it is Zero) and count indicates 
      number bytes to be copied.In this case it is 1024(it can be any thing 
      otherthan 1024);
    4.When above write Method is executed you will have byte array copied to the requried 
      file.If nothing is wrote from the array Write method returns zero(with which we can 
      conclude that there is no data in the byte array..).The return value always indicates 
      number of byte wrote from the array.(This is not always equal to count value we have
      passed .For more clarity read last section in this tutorial....)
    5.If you want write once again repeat step 3
    6.Close the FileStream at the end.
**************THIS IS EXACTLY SIMILAR TO write SYSTEM CALL IN LINUX****************
example:-
---------
class IOStreams
{
	static void Main()
	{
		FileStream fs = new FileStream(@"d:\xyz.exe", FileMode.OpenOrCreate);
		int Size = 1024;
		byte []data = new byte[Size];
		int b = fs.Read(data,0,Size);
		while(b!=0)
		{
			b = fs.Read(data,0,Size);
			//manipulate data here....
		}
		fs.Close();
	}
}

#################################################################################

To Read (or Write) primitive values from (or to) files 
						(ex:- reading int,char,double... from files)
	example:-
	---------
	//Usage of BinaryReader and BinaryWriter
class IOStreams
{
	static void Main()
	{
		//Writing 
		Stream sin = new FileStream(@"d:\a.txt", FileMode.Create);
		BinaryWriter bw = new BinaryWriter(sin);
		bw.Write(124);
		bw.Write("Vineel");
		bw.Close();
		sin.Close();

		//Reading
		Stream sout = new FileStream(@"d:\a.txt", FileMode.Open);
		BinaryReader br = new BinaryReader(sout);
		Console.WriteLine(br.ReadInt32());
		Console.WriteLine(br.ReadString());
		br.Close();
		sout.Close();
	}
}
	Open the created text file in Notepad and see,you will find only cryptic characters	
	not the values inserted.But the interesting thing is the data written to the file is exactly
	read back by BinaryReader even though we cannot recognise it manually.
########################################################################################	
CHOOSING THE RIGHT CLASSES 
--------------------------
1.When working with text files like copying or reading use StreamReader and StreamWriter.
2.When you want to manipulate bytes from binary files (like MP3,EXE files) for example 
  extracting bitrate from an MP3 file or even copying to EXE Files use FileStream.
3.Finally storing data in predefined sequence and to retrieve it in that sequence.
  for example student details like RollNumber(int),Name(String), FeePaid(double) .e.t.c
  use BinaryReader and BinaryWriter because they make reading process easier without
  we worrying about how the data is stored in the file.In this case we can simply call
  br.ReadInt32() for RollNumber,br.ReadString() for Name,br.ReadDouble() for FeePaid to
  get the data stored.
#########################################################################################

return values from Read or Write methods need not always equal to their count parameter 
----------------------------------------------------------------------------------------
Consider a file having 25 bytes and if we are reading(writing) it in a bulk of 10 bytes
(means count=10) we need to call Read (or Write) method 3 times.In 1st two Read(or Write) 
calls the value returned is equal to count value . But now when these two Read (or Write)
calls are completed we have only 5 more bytes to read (or write) so at this point 
even though the Read (or Write) method is supposed to  read (Or write) 10 bytes it will 
only read (Or write) 5 bytes and accordingly the return value is only 5. 
-----------------------------------------------------------------------------------------

There are many more classes in .NET Framework conserned with IO. 
Only basic classes are dealt here.
 								By
 							K.Vineel Kumar Reddy				                                     						        Mon 07/1/2008 9:30PM

#########################################################################
###CCC#####CCC##CCC##CCCC#####CCC##CCCCCCCCCC##CCCCCCCCCC##CC############
###CCC#####CCC##CCC##CCCCC####CCC##CCCCCCCC####CCCCCCCC####CCC###########
###CCC#####CCC##CCC##CCC#CC###CCC##CCC#########CCC#########CCC###########
####CCC###CCC###CCC##CCC##CC##CCC##CCCCCCC#####CCCCCCC#####CCC###########
####CCC###CCC###CCC##CCC##CC##CCC##CCCCCCC#####CCCCCCC#####CCC###########
####CCC###CCC###CCC##CCC###CC#CCC##CCC#########CCC#########CCC###########
#####CCC#CCC####CCC##CCC####CCCCC##CCCCCCCC####CCCCCCCC####CCCCCCCCC#####
######CCCCC#####CCC##CCC#####CCCC##CCCCCCCCCC##CCCCCCCCCC##CCCCCCCCCCC###
#########################################################################
				 
