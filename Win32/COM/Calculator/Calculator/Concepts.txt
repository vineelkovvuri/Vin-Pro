Below code is valid client code

#include <objbase.h>

// This interface has no implementation in this sample program
interface ICalculator
{
	virtual int STDMETHODCALLTYPE Add(int First, int Second) = 0;
	virtual int STDMETHODCALLTYPE Sub(int First, int Second) = 0;
};

int main()
{
	// Until the client does not create the actual object,
	// The compiler is happy to compile this program
	// 
	// This very same is idea is used for COM to seperate
	// Client and the Component
	ICalculator *i = nullptr;
	i->Add(10, 20);
    return 0;
}

//-----------------------------------------------------------------
Below is the reason why we need static_cast in QueryInterface

struct Base {
	int Add(int a, int b);
};

struct Derived : public Base {
	int Sub(int a, int b);
};
int main()
{
	Derived *d;
	// we do not need static_cast<Base *>(d)
	// because compiler knows to which pointer
	// it is getting converted to
	Base *b = d;
	b->Add(10, 20);

	// Ideally on the client side, if a void pointer is passed
	// instead of interface pointer to CoCreateInstance and the 
	// client is assumed to do the proper cast then QueryInterface
	// would need not do the static cast. (Except to perform AddRef)
	// 
	// But the usual practice is, the client will provide the required
	// interface pointer casted as void to CoCreateInstance and its
	// the QueryInterface responsibility to put the right interface
	// pointer in to that. That is why we need static_cast.
	void *b2 = d;  // If b2 was of type Base * then we are putting the wrong interface pointer 

    return 0;
}
//-----------------------------------------------------------------

