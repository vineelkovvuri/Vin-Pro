Abrams_ch04.fm Page 67 Friday, August 19, 2005 3:35 PM

4
Type Design Guidelines

CLR PERSPECTIVE , there are only two categories of types-- reference types and value types--but for the purpose of framework design discussion we divide types into more logical groups, each with its own specific design rules. Figure 4-1 shows these logical groups. Classes are the general case of reference types. They make up the bulk of types in the majority of frameworks. Classes owe their popularity to the rich set of object-oriented features they support and to their general applicability. Base classes and abstract classes are special logical groups related to extensibility. Extensibility and base classes are covered in Chapter 6. Interfaces are types that can be implemented both by reference types and value types. This allows them to serve as roots of polymorphic hierarchies of reference types and value types. In addition, interfaces can be used to simulate multiple inheritance, which is not natively supported by the CLR. Structs are the general case of value types and should be reserved for small, simple types, similar to language primitives. Enums are a special case of value types used to define short sets of values, such as days of the week, console colors, and so on. Static classes are types intended as containers for static members. They are commonly used to provide shortcuts to other operations. Delegates, exceptions, attributes, arrays, and collections are all special cases of reference types intended for specific uses, and guidelines for their design and usage are discussed elsewhere in this book.

F

ROM THE

67

