
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<TITLE>Windows Via C/C++ - Books24x7</TITLE>
<SCRIPT LANGUAGE="JavaScript1.2" SRC="dui.js"></SCRIPT><SCRIPT LANGUAGE="JavaScript1.2" SRC="chaptertoc.js"></SCRIPT><LINK REL="stylesheet" HREF="zapplication.css" type="text/css"/>
<LINK REL="stylesheet" HREF="zshowkeywords.css" type="text/css"/>

<LINK REL="stylesheet" TYPE="text/css" HREF="ie.content.books24x7.css"/>

</HEAD>
<BODY LEFTMARGIN="20" TOPMARGIN="5" RIGHTMARGIN="0" BGCOLOR="#FFFFFF">
<A HREF="#content" TABINDEX=1><IMG SRC="images/_.gif" WIDTH="1" HEIGHT="1" ALT="Skip Navigation" TITLE="Skip Navigation" BORDER="0"></A>
<A NAME="content"></A>
<DIV STYLE="position:absolute;top:260;left:45;display:none;" ID="thebubble"></DIV><SCRIPT LANGUAGE="JavaScript">
<!-- // Activate cloak
function PopImage(id, src, width, height)
  {
  if(id)
    {
    var img1 = document.getElementById(id);
    if(img1)
      {
      img1.style.display = 'none';
      var img2 = document.getElementById(id+'$');
        {
        if(img2)
          {
          img2.style.display = 'inline';
          }
        else
          {
          node = img1.parentNode.parentNode
          node.innerHTML += '<IMG ID="'+id+'$" SRC="'+src+'" WIDTH="'+width+'" HEIGHT="'+height+'" ALT="Click to collapse" TITLE="Click to collapse" onClick="UnPopImage(\''+id+'\')" >'
          }
        }
      }
    }
  }

function UnPopImage(id)
  {
  if(id)
    {
    var img1 = document.getElementById(id);
    var img2 = document.getElementById(id+'$');
    if(img2) img2.style.display = 'none';
    if(img1) img1.style.display = 'inline';
    }
  }
// Deactivate cloak -->
</SCRIPT>

<DIV CLASS="b24-bookmeta" xmlns:dc="http://purl.org/dc/elements/1.0/">
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="2" CLASS="b24-folderbook1">
<TR>
<TD VALIGN="TOP" ALIGN="Right"><A BORDER="0" HREF="toc.asp@bookid=22940"><IMG BORDER="0" ALIGN="Left" SRC="images/9780735624245.gif" HEIGHT="97" WIDTH="80" ALT="Windows Via C/C++"></A></TD>
<TD WIDTH="2" HEIGHT=""><IMG SRC="images/_.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0"></TD>
<TD VALIGN="Top" ALIGN="Left">
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="4" WIDTH="100%" HEIGHT="">
<TR>
<TD VALIGN="TOP" ALIGN="Left" NOWRAP="1" COLSPAN="2"><A BORDER="0"><SPAN CLASS="b24-bookchaptertitle">Chapter 7 - 
 Thread Scheduling, Priorities, and Affinities</SPAN></A></TD>
</TR>
<TR>
<TD VALIGN="Top" ALIGN="Left" COLSPAN="2">Windows Via C/C++</TD>
</TR>
<TR>
<TD VALIGN="TOP" ALIGN="Left" COLSPAN="2"><SPAN CLASS="b24-bookauthor">by Jeffrey Richter and Christophe Nasarre</SPAN> </TD>
</TR>
<TR><TD VALIGN="TOP" ALIGN="Left" COLSPAN="2"><A HREF="../../books.asp@imprintid=65"><SPAN CLASS="b24-bookimprint">Microsoft Press</SPAN></A><SPAN CLASS="b24-bookcwdate"> © 2008</SPAN></TD>
</TR>
<TR><TD VALIGN="TOP" ALIGN="Left" COLSPAN="2" ID="ID22940"></TD></TR>
</TABLE>
</TD>
</TR>
<TR><TD VALIGN="TOP" ALIGN="Center" COLSPAN="3" HEIGHT="10"><IMG SRC="images/_.gif" WIDTH="1" BORDER="0" ALT="" HEIGHT="10"></TD></TR>
</TABLE>
</DIV>

<SCRIPT LANGUAGE="JavaScript">
<!--
function Next(item) {
var cm = new Array(3,44,14,99,5,82,97,40,88,48,89,84,12,4,75)
var a1 = new Array(4,13,0)
var a2 = new Array(2,14,10)
var a3 = new Array(9,7,5)
var a4 = new Array(8,3,12)
var a5 = new Array(11,1,6)
var b1="00"+cm[a1[item]]; b1= b1.substr(b1.length-2,2)
var b2="00"+cm[a2[item]]; b2= b2.substr(b2.length-2,2)
var b3="00"+cm[a3[item]]; b3= b3.substr(b3.length-2,2)
var b4="00"+cm[a4[item]]; b4= b4.substr(b4.length-2,2)
var b5="00"+cm[a5[item]]; b5= b5.substr(b5.length-2,2)
var h ='viewer.asp@bookid=22940\46chunkid='+b1+b2+b3+b4+b5;
this.location=h}
//  -->
</SCRIPT>
<TABLE CELLSPACING="0" CELLPADDING="0" BORDER="0" WIDTH="100%">
<TR>
<TD ALIGN="Center">
<TABLE CELLSPACING="5" CELLPADDING="0" BORDER="0" WIDTH="85%"></TABLE>
</TD>
</TR>
<TR><TD BGCOLOR="#000000"><IMG SRC="images/transdot.gif" WIDTH="1" HEIGHT="1" BORDER="0" ALT=""></TD></TR>
</TABLE>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>
<TD COLSPAN="3" HEIGHT="5"><IMG SRC="images/_.gif" WIDTH="1" ALT="" BORDER="0" HEIGHT="5"></TD>
</TR>
<TR>
<TD CLASS="b24-chunknavigate" WIDTH="25%" ALIGN="left"><A BORDER="0" HREF="514488884.htm"><IMG SRC="images/arrow_readprevious.gif" WIDTH="94" HEIGHT="22" HSPACE="0" ALT="Previous Section" TITLE="Previous Section" BORDER="0"></A></TD>
<TD CLASS="b24-chunknavigate" WIDTH="75%" ALIGN="center">
<TABLE CELLPADDING="0" CELLSPACING="0" BORDER="0">
<TR HEIGHT="11">
<TD WIDTH="6"><IMG WIDTH="6" HEIGHT="11" BORDER="0" SRC="images/progress_left.gif" ALT="Progress:"></TD>
<TD BACKGROUND="images/progress_bar.gif" WIDTH="300"><IMG HEIGHT="11" BORDER="0" SRC="images/_.gif" ALIGN="Left" WIDTH="76" ALT="Progress:"><IMG WIDTH="9" HEIGHT="11" BORDER="0" SRC="images/progress_marker.gif" ALIGN="Left" ALT="Progress: 26%"></TD>
<TD WIDTH="6"><IMG WIDTH="6" HEIGHT="11" BORDER="0" SRC="images/progress_right.gif" ALT="Progress:"></TD>
</TR>
</TABLE>
</TD>
<TD CLASS="b24-chunknavigate" WIDTH="25%" ALIGN="right"><A BORDER="0" HREF="viewer.asp?bookid=22940&amp;chunkid=389821297"><IMG WIDTH="1" HEIGHT="1" HSPACE="1" BORDER="0" ALT="" SRC="images/_.gif"></A><A BORDER="0" HREF="475409944.htm"><IMG SRC="images/arrow_readnext.gif" WIDTH="94" HEIGHT="22" HSPACE="0" ALT="Next Section" TITLE="Next Section" BORDER="0"></A></TD>
</TR>
<TR>
<TD COLSPAN="3" HEIGHT="5"><IMG SRC="images/_.gif" WIDTH="1" ALT="" BORDER="0" HEIGHT="5"></TD>
</TR>
</TABLE>
<div xmlns:esi="i.am.akamai"><!--Bypass:First Viewer Page:pdf download link: Time:Thu, 17 Jan 2008 11:28:42 UTC--><div><!--XML Creation Time:Thu, 17 Jan 2008 11:28:43 UTC-->
<div class="chapter">
<a name="ch071C4AB577-C32E-4A16-BF0F-07F3124E103E"></a><span class="beginpage" pagenum=""></span>
<div class="section">
<h2 class="first-section-title">
<a name="398"></a><a name="ch07lev1sec111C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>Programming Priorities</h2>
<p class="first-para">So how is a process assigned a priority class? Well, when you call <b class="bold"><span class="fixed">CreateProcess</span></b>, you can pass the desired priority class in the <b class="bold"><span class="fixed">fdwCreate</span></b> parameter. <a class="internaljump" href="#ch07table051C4AB577-C32E-4A16-BF0F-07F3124E103E">Table 7-5</a> shows the priority class identifiers.</p>
<a name="399"></a><a name="ch07table051C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>
<table linktabletoexcel="yes" id="ch07table05" class="table" border="1">
<caption class="table-title">
<span class="table-title"><span class="table-titlelabel">Table 7-5: </span>Process Priority Classes</span>
<br>
<a href="outputobject.asp@bookid=22940&chunkid=198206019&objectid=ch07table05&objecttype=spreadsheet" class="object-link" target="_blank"><IMG HEIGHT="11" BORDER="0" WIDTH="13" SRC="images/b24-bluearrow.gif" ALT=""> Open table as spreadsheet</a>
</caption>
<thead>
<tr valign="top">
<th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Priority Class</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Symbolic Identifiers</b>
</p>
</th>
</tr>
</thead>
<tbody>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Real-time</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">REALTIME_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">High</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">HIGH_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Above normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">ABOVE_NORMAL_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">NORMAL_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Below normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">BELOW_NORMAL_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Idle</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">IDLE_PRIORITY_CLASS</span></b>
</p>
</td>
</tr>
</tbody>
</table>
<p class="para">It might seem odd that the process that creates a child process chooses the priority class at which the child process runs. Let's consider Windows Explorer as an example. When you use Windows Explorer to run an application, the new process runs at normal priority. Windows Explorer has no idea what the process does or how often its threads need to be scheduled. However, once the child process is running, it can change its own priority class by calling <b class="bold"><span class="fixed">SetPriorityClass</span></b>:</p>
<div class="informalexample">
<pre class="literallayout">
BOOL SetPriorityClass(
   HANDLE hProcess,
   DWORD fdwPriority);
</pre>
</div>
<p class="para">This function changes the priority class identified by <b class="bold"><span class="fixed">hProcess</span></b> to the value specified in the <b class="bold"><span class="fixed">fdwPriority</span></b> parameter. The <b class="bold"><span class="fixed">fdwPriority</span></b> parameter can be one of the identifiers shown in the preceding table. Because this function takes a process handle, you can alter the priority class of any process running in the system as long as you have a handle to it and sufficient access.</p>
<span class="beginpage" pagenum="192"><a name="400"></a><a name="IDX-1921C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
<p class="para">Normally, a process will attempt to alter its own priority class. Here is an example of how to have a process set its own priority class to idle:</p>
<div class="informalexample">
<pre class="literallayout">
BOOL SetPriorityClass(
   GetCurrentProcess(),
   IDLE_PRIORITY_CLASS);
</pre>
</div>
<p class="para">Here is the complementary function used to retrieve the priority class of a process:</p>
<div class="informalexample">
<pre class="literallayout">
DWORD GetPriorityClass(HANDLE hProcess);
</pre>
</div>
<p class="para">As you might expect, this function returns one of the identifiers listed in <a class="internaljump" href="#ch07table051C4AB577-C32E-4A16-BF0F-07F3124E103E">Table 7-5</a>.</p>
<p class="para">When you invoke a program using the command shell, the program's starting priority is normal. However, if you invoke the program using the <b class="bold"><span class="fixed">START</span></b> command, you can use a switch to specify the starting priority of the application. For example, the following command entered at the command shell causes the system to invoke the Calculator and initially run it at idle priority:</p>
<div class="informalexample">
<pre class="literallayout">
C:\&gt;START /LOW CALC.EXE
</pre>
</div>
<p class="para">The <b class="bold"><span class="fixed">START</span></b> command also recognizes the <b class="bold"><span class="fixed">/BELOWNORMAL</span></b>, <b class="bold"><span class="fixed">/NORMAL</span></b>, <b class="bold"><span class="fixed">/ABOVENORMAL</span></b>, <b class="bold"><span class="fixed">/HIGH</span></b>, and <b class="bold"><span class="fixed">/REALTIME</span></b> switches to start executing an application at their respective priority classes. Of course, once an application starts executing, it can call <b class="bold"><span class="fixed">SetPriorityClass</span></b> to alter its own priority to whatever it chooses.</p>
<p class="para">The Windows Task Manager allows the user to change the priority class of a process. The following figure shows the Task Manager's Processes tab, which shows all the processes currently running. The Base Pri column shows each process' priority class. You can alter a process' priority class by selecting a process and then selecting an option from the context menu's Set Priority submenu.</p>
<div class="informalfigure">
<span class="figuremediaobject"><a href="javascript:PopImage('IMG_43','images/fig218_01_0.jpg','447','443')" NAME="IMG_43" target="_self"><img alt="Image from book" id="IMG_43" src="images/fig218_01.jpg" height="266" width="268" title="Click To expand" border="0"></a></span>
</div>
<span class="beginpage" pagenum="193"><a name="401"></a><a name="IDX-1931C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
<p class="para">When a thread is first created, its relative thread priority is always set to normal. It has always seemed odd to me that <b class="bold"><span class="fixed">CreateThread</span></b> doesn't offer a way for the caller to set the new thread's relative priority. To set and get a thread's relative priority, you must call these functions:</p>
<div class="informalexample">
<pre class="literallayout">
BOOL SetThreadPriority(
   HANDLE hThread,
   int nPriority);
</pre>
</div>
<p class="para">Of course, the <b class="bold"><span class="fixed">hThread</span></b> parameter identifies the single thread whose priority you want to change, and the <b class="bold"><span class="fixed">nPriority</span></b> parameter is one of the seven identifiers listed in <a class="internaljump" href="#ch07table061C4AB577-C32E-4A16-BF0F-07F3124E103E">Table 7-6</a>.</p>
<a name="402"></a><a name="ch07table061C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>
<table linktabletoexcel="yes" id="ch07table06" class="table" border="1">
<caption class="table-title">
<span class="table-title"><span class="table-titlelabel">Table 7-6: </span>Relative Thread Priorities</span>
<br>
<a href="outputobject.asp@bookid=22940&chunkid=198206019&objectid=ch07table06&objecttype=spreadsheet" class="object-link" target="_blank"><IMG HEIGHT="11" BORDER="0" WIDTH="13" SRC="images/b24-bluearrow.gif" ALT=""> Open table as spreadsheet</a>
</caption>
<thead>
<tr valign="top">
<th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Relative Thread Priority</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Symbolic Constant</b>
</p>
</th>
</tr>
</thead>
<tbody>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Time-critical</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_TIME_CRITICAL</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Highest</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_HIGHEST</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Above normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_ABOVE_NORMAL</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_NORMAL</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Below normal</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_BELOW_NORMAL</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Lowest</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_LOWEST</span></b>
</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">Idle</p>
</td><td class="td" align="left">
<p class="table-para">
<b class="bold"><span class="fixed">THREAD_PRIORITY_IDLE</span></b>
</p>
</td>
</tr>
</tbody>
</table>
<p class="para">Here is the complementary function for retrieving a thread's relative priority:</p>
<div class="informalexample">
<pre class="literallayout">
int GetThreadPriority(HANDLE hThread);
</pre>
</div>
<p class="para">This function returns one of the identifiers listed in the preceding table.</p>
<p class="para">To create a thread with an idle relative thread priority, you execute code similar to the following:</p>
<div class="informalexample">
<pre class="literallayout">
DWORD dwThreadID;
HANDLE hThread = CreateThread(NULL, 0, ThreadFunc, NULL,
   CREATE_SUSPENDED, &amp;dwThreadID);
SetThreadPriority(hThread, THREAD_PRIORITY_IDLE);
ResumeThread(hThread);
CloseHandle(hThread);
</pre>
</div>
<p class="para">Note that <b class="bold"><span class="fixed">CreateThread</span></b> always creates a new thread with a normal relative thread priority. To have the thread execute using idle priority, you pass the <b class="bold"><span class="fixed">CREATE_SUSPENDED</span></b> flag to <b class="bold"><span class="fixed">CreateThread</span></b>; this prevents the thread from executing any code at all. Then you call <b class="bold"><span class="fixed">SetThreadPriority</span></b> to change the thread to an idle relative thread priority. You then call <b class="bold"><span class="fixed">ResumeThread</span></b> so that the thread can be schedulable. You don't know when the thread will get CPU time, but the scheduler takes into account the fact that this thread has an idle thread priority. Finally, you close the handle to the new thread so that the kernel object can be destroyed as soon as the thread terminates.</p>
<table border="0" cellspacing="0" cellpadding="0" class="note">
<tr>
<td valign="top" class="admon-check"></td><td valign="top" class="admon-title">Note&nbsp;</td><td valign="top" class="admon-body">
<p class="first-para">Windows does not offer a function that returns a thread's priority level. This omission is deliberate. Remember that Microsoft reserves the right to change the scheduling algorithm at any time. You should not design an application that requires specific knowledge of the scheduling algorithm. If you stick with process priority classes and relative thread priorities, your application should run well today and on future versions of the system.</p>
</td>
</tr>
</table>
<span class="beginpage" pagenum="194"><a name="403"></a><a name="IDX-1941C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
<div class="section">
<h3 class="sect3-title">
<a name="404"></a><a name="ch07lev2sec11C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>Dynamically Boosting Thread Priority Levels</h3>
<p class="first-para">The system determines the thread's priority level by combining a thread's relative priority with the priority class of the thread's process. This is sometimes referred to as the thread's <i class="emphasis">base priority level</i>. Occasionally, the system boosts the priority level of a thread&mdash;usually in response to some I/O event such as a window message or a disk read.</p>
<p class="para">For example, a thread with a normal thread priority in a high-priority class process has a base priority level of 13. If the user presses a key, the system places a <b class="bold"><span class="fixed">WM_KEYDOWN</span></b> message in the thread's queue. Because a message has appeared in the thread's queue, the thread is schedulable. In addition, the keyboard device driver can tell the system to temporarily boost the thread's level. So the thread might be boosted by 2 and have a current priority level of 15.</p>
<p class="para">The thread is scheduled for one time slice at priority 15. Once that time slice expires, the system drops the thread's priority by 1 to 14 for the next time slice. The thread's third time slice is executed with a priority level of 13. Any additional time slices required by the thread are executed at priority level 13, the thread's base priority level.</p>
<p class="para">Note that a thread's current priority level never goes below the thread's base priority level. Also note that the device driver that causes the thread to be schedulable determines the amount of the boost. Again, Microsoft does not document how much boost a thread will get by any individual device driver. This allows Microsoft to continuously fine-tune the dynamic boosts to determine the best overall responsiveness.</p>
<p class="para">The system boosts only threads that have a base priority level between 1 and 15. In fact, this is why this range is referred to as the <i class="emphasis">dynamic priority range</i>. In addition, the system never boosts a thread into the real-time range (above 15). Because threads in the real-time range perform most operating system functions, enforcing a cap on the boost prevents an application from interfering with the operating system. Also, the system never dynamically boosts threads in the real-time range (16 through 31).</p>
<p class="para">Some developers complained that the system's dynamic boosts had an adverse affect on their threads' performance, so Microsoft added the following two functions to let you disable the system's dynamic boosting of thread priority levels:</p>
<div class="informalexample">
<pre class="literallayout">
BOOL SetProcessPriorityBoost(
   HANDLE hProcess,
   BOOL bDisablePriorityBoost);
BOOL SetThreadPriorityBoost(
   HANDLE hThread,
   BOOL bDisablePriorityBoost);
</pre>
</div>
<p class="para">
<b class="bold"><span class="fixed">SetProcessPriorityBoost</span></b> tells the system to enable or disable priority boosting for all threads within a process; <b class="bold"><span class="fixed">SetThreadPriorityBoost</span></b> lets you enable or disable priority boosting for individual threads. These two functions have counterparts that allow you to determine whether priority boosting is enabled or disabled:</p>
<div class="informalexample">
<pre class="literallayout">
BOOL GetProcessPriorityBoost(
   HANDLE hProcess,
   PBOOL pbDisablePriorityBoost);
BOOL GetThreadPriorityBoost(
   HANDLE hThread,
   PBOOL pbDisablePriorityBoost);
<span class="beginpage" pagenum="195"><a name="405"></a><a name="IDX-1951C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
</pre>
</div>
<p class="para">To each of these functions, you pass the handle of the process or thread that you want to query along with the address of a BOOL that will be set by the function.</p>
<p class="last-para">Another situation causes the system to dynamically boost a thread's priority level. Imagine a priority 4 thread that is ready to run but cannot because a priority 8 thread is constantly schedulable. In this scenario, the priority 4 thread is being starved of CPU time. When the system detects that a thread has been starved of CPU time for about three to four seconds, it dynamically boosts the starving thread's priority to 15 and allows that thread to run for twice its time quantum. When the double time quantum expires, the thread's priority immediately returns to its base priority.</p>
</div>
<div class="section">
<h3 class="sect3-title">
<a name="406"></a><a name="ch07lev2sec21C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>Tweaking the Scheduler for the Foreground Process</h3>
<p class="first-para">When the user works with windows of a process, that process is said to be the <i class="emphasis">foreground process</i> and all other processes are <i class="emphasis">background processes</i>. Certainly, a user would prefer the process that he or she is using to behave more responsively than the background processes. To improve the responsiveness of the foreground process, Windows tweaks the scheduling algorithm for threads in the foreground process. The system gives foreground process threads a larger time quantum than they would usually receive. This tweak is performed only if the foreground process is of the normal priority class. If it is of any other priority class, no tweaking is performed.</p>
<p class="para">Windows Vista actually allows a user to configure this tweaking. On the Advanced tab of the System Properties dialog box, the user can click the Settings button of the Performance section to pop up the Performance Options dialog box and finally select the Advanced tab.</p>
<div class="informalfigure">
<span class="figuremediaobject"><a href="javascript:PopImage('IMG_44','images/fig221_01_0.jpg','368','524')" NAME="IMG_44" target="_self"><img alt="Image from book" id="IMG_44" src="images/fig221_01.jpg" height="315" width="221" title="Click To expand" border="0"></a></span>
</div>
<p class="para">If the user chooses to optimize performance for programs (which is the default in Windows Vista), the system performs the tweaking. If the user chooses to optimize performance for background services, no tweaking is performed.</p>
<span class="beginpage" pagenum="196"><a name="407"></a><a name="IDX-1961C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
</div>
<div class="section">
<h3 class="sect3-title">
<a name="408"></a><a name="ch07lev2sec31C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>Scheduling I/O Request Priorities</h3>
<p class="first-para">Setting thread priorities affects how threads are scheduled CPU resources. However, threads also perform I/O requests to read and write data from disk files. If a low-priority thread gets CPU time, it could easily queue hundreds or thousands of I/O requests in a very short time. Because I/O requests typically require time to process, it is possible that a low-priority thread could significantly affect the responsiveness of the system by suspending high-priority threads, which prevents them from getting their work done. Because of this, you can see a machine become less responsive when executing long-running low-priority services such as disk defragmenters, virus scanners, content indexers, and so on.</p>
<p class="para">Starting with Windows Vista, it is now possible for a thread to specify a priority when making I/O requests. You can tell Windows that a thread should issue low-priority I/O requests by calling <b class="bold"><span class="fixed">SetThreadPriority</span></b> passing <b class="bold"><span class="fixed">THREAD_MODE_BACKGROUND_BEGIN</span></b>. Note, this also lowers the CPU scheduling priority of the thread. You can return the thread to making normal priority I/O requests (and normal CPU scheduling priority) by calling <b class="bold"><span class="fixed">SetThreadPriority</span></b>, again passing <b class="bold"><span class="fixed">THREAD_</span></b> <b class="bold"><span class="fixed">MODE_BACKGROUND_END</span></b>. When you call <b class="bold"><span class="fixed">SetThreadPriority</span></b> passing either of these flags, you must pass the handle to the calling thread (returned by calling <b class="bold"><span class="fixed">GetCurrentThread</span></b>); a thread is not allowed to change the I/O priority of another thread.</p>
<p class="para">If you want all threads in a process to make low-priority I/O requests and have low CPU scheduling, you can call <b class="bold"><span class="fixed">SetPriorityClass</span></b> passing <b class="bold"><span class="fixed">PROCESS_MODE_BACKGROUND_BEGIN</span></b>. You can reverse this action by calling <b class="bold"><span class="fixed">SetPriorityClass</span></b> passing <b class="bold"><span class="fixed">PROCESS_MODE_BACKGROUND_END</span></b>. When you call <b class="bold"><span class="fixed">SetPriorityClass</span></b> passing either of these flags, you must pass the handle to the calling process (returned by calling <b class="bold"><span class="fixed">GetCurrentProcess</span></b>); a thread is not allowed to change the I/O priority of threads in another process.</p>
<p class="para">At an even finer grain, a normal-priority thread can perform background-priority I/Os on a specific file as shown in the following code snippet:</p>
<div class="informalexample">
<pre class="literallayout">
FILE_IO_PRIORITY_HINT_INFO phi;
phi.PriorityHint = IoPriorityHintLow;
SetFileInformationByHandle(
   hFile, FileIoPriorityHintInfo, &amp;phi, sizeof(PriorityHint));
</pre>
</div>
<p class="para">The priority set by <b class="bold"><span class="fixed">SetFileInformationByHandle</span></b> overrides the priority set at the process or thread level by <b class="bold"><span class="fixed">SetPriorityClass</span></b> or <b class="bold"><span class="fixed">SetThreadPriority</span></b>, respectively.</p>
<p class="para">As a developer, it is your responsibility to use these new background priorities to allow the foreground applications to be more responsive, taking care to avoid <i class="emphasis">priority inversion</i>. In the presence of intense normal-priority I/Os, a thread running at background priority can be delayed for <i class="emphasis">seconds</i> before getting the result of its I/O requests. If a low-priority thread has grabbed a lock for which the normal-priority thread is waiting, the normal-priority threads might end up waiting for the background-priority thread until the low-priority I/O requests are completed. Your background-priority thread does not even have to submit I/Os for the problem to happen. So using shared synchronization objects between normal and background-priority threads should be minimized (or eliminated if possible) to avoid these priority inversions where normal-priority threads are blocked on locks owned by background-priority threads.</p>
<span class="beginpage" pagenum="197"><a name="409"></a><a name="IDX-1971C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
<table border="0" cellspacing="0" cellpadding="0" class="note">
<tr>
<td valign="top" class="admon-check"></td><td valign="top" class="admon-title">Note&nbsp;</td><td valign="top" class="admon-body">
<p class="first-para">Notice that SuperFetch is taking advantage of these new background priorities. For more details about priority I/O, refer to the white paper on <a target="_top" class="url" href="../../../www.microsoft.com/whdc/driver/priorityio.mspx"><i class="emphasis">http://www.microsoft.com/whdc/driver/priorityio.mspx</i></a>.</p>
</td>
</tr>
</table>
</div>
<div class="section">
<h3 class="sect3-title">
<a name="410"></a><a name="ch07lev2sec41C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>The Scheduling Lab Sample Application</h3>
<p class="first-para">Using the Scheduling Lab application, 07-SchedLab.exe (listed on the next page), you can experiment with process priority classes and relative thread priorities to see their effect on the system's overall performance. The source code and resource files for the application are in the 07-SchedLab directory on the companion content Web page. When you start the program, the window shown here appears.</p>
<div class="informalfigure">
<span class="figuremediaobject"><img alt="Image from book" id="IMG_45" src="images/fig223_01.jpg" height="143" width="317" title="" border="0"></span>
</div>
<p class="para">Initially, the primary thread is always busy, so your CPU usage immediately jumps to 100 percent. The primary thread constantly increments a number and adds it to the list box on the right. The number doesn't have any meaning&mdash;it simply shows that the thread is busy doing something. To get a feel for how thread scheduling actually affects the system, I recommend that you run at least two instances of this sample application simultaneously to see how changing the priorities of one instance affects the other instances. You can also run Task Manager and monitor the CPU usage of all instances.</p>
<p class="para">When you perform these tests, the CPU usage will initially go to 100 percent and all instances of the application will get about equal CPU time. (Task Manager should show about the same percentage of CPU usage for all instances.) If you change one instance's priority class to above normal or high, you should see it get the bulk of the CPU usage. The scrolling of numbers in the other instances will become erratic. However, the other instances do not stop scrolling completely because of the dynamic boosting that the system automatically performs for starving threads. Anyway, you can play with the priority class and relative thread priorities to see how they affect the other instances. I purposely coded the Scheduling Lab application so that it doesn't allow you to change the process to the real-time priority class because this prevents operating system threads from performing properly. If you want to experiment with real-time priority, you must modify the source code yourself.</p>
<p class="para">You can use the Sleep field to stop the primary thread from being schedulable for any number of milliseconds from 0 to 9999. Experiment with this and see how much CPU processing time you recover by passing a sleep value of just 1 millisecond. On my 2.2-GHz Pentium notebook computer, I gain back 99 percent&mdash;quite a drop!</p>
<span class="beginpage" pagenum="198"><a name="411"></a><a name="IDX-1981C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
<p class="para">Clicking the Suspend button causes the primary thread to spawn a secondary thread. This secondary thread suspends the primary thread and displays the following message box.</p>
<div class="informalfigure">
<span class="figuremediaobject"><a href="javascript:PopImage('IMG_46','images/fig224_01_0.jpg','425','169')" NAME="IMG_46" target="_self"><img alt="Image from book" id="IMG_46" src="images/fig224_01.jpg" height="101" width="255" title="Click To expand" border="0"></a></span>
</div>
<p class="para">While this message box is displayed, the primary thread is completely suspended and uses no CPU time. The secondary thread also does not use any CPU time because it is simply waiting for the user to do something. While the message box is displayed, you can move it over the application's main window and then move it away so that you can see the main window. Because the primary thread is suspended, the main window will not handle any window messages (including <b class="bold"><span class="fixed">WM_PAINT</span></b>). This is proof positive that the thread is suspended. When you dismiss the message box, the primary thread is resumed and the CPU usage goes back up to 100 percent.</p>
<p class="para">For one more test, display the Performance Options dialog box discussed in the <a class="internaljump" href="#ch07lev2sec31C4AB577-C32E-4A16-BF0F-07F3124E103E">previous section</a>, and change the setting from Application to Background Services or vice versa. Then take multiple instances of the SchedLab program, set them all to the normal priority class, and activate one of them to make it the foreground process. You'll see what effect the performance setting has on the foreground/background processes.</p>
<div class="example">
<span class="example-title">SchedLab.cpp</span><a name="412"></a><a name="N265611C4AB577-C32E-4A16-BF0F-07F3124E103E"></a>
<div class="formalbody">
<table class="BlueLine" border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td bgcolor="000080" class="bluecell"><font size="2" face="Arial" color="010100"><b><img alt="Image from book" src="_.gif" width="1" height="2" title="Start example" border="0"></b></font></td>
</tr>
</table>
<div class="informalexample">
<pre class="literallayout">
/******************************************************************************
Module: SchedLab.cpp
Notices: Copyright (c) 2008 Jeffrey Richter &amp; Christophe Nasarre
******************************************************************************/


#include "..\CommonFiles\CmnHdr.h"     /* See <a href="../../viewer.asp@bkid=22940&destid=1416#1416" target="_parent" class="chapterjump">Appendix A</a>. */
#include &lt;windowsx.h&gt;
#include &lt;tchar.h&gt;
#include "Resource.h"
#include &lt;StrSafe.h&gt;


///////////////////////////////////////////////////////////////////////////////


DWORD WINAPI ThreadFunc(PVOID pvParam) {

   HANDLE hThreadPrimary = (HANDLE) pvParam;
   SuspendThread(hThreadPrimary);
   chMB(
      "The Primary thread is suspended.\n"
      "It no longer responds to input and produces no output.\n"
      "Press OK to resume the primary thread &amp; exit this secondary thread.\n");
   ResumeThread(hThreadPrimary);
   CloseHandle(hThreadPrimary);
<span class="beginpage" pagenum="199"><a name="413"></a><a name="IDX-1991C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
   // To avoid deadlock, call EnableWindow after ResumeThread.
   EnableWindow(
      GetDlgItem(FindWindow(NULL, TEXT("Scheduling Lab")), IDC_SUSPEND),
      TRUE);
   return(0);
}


///////////////////////////////////////////////////////////////////////////////


BOOL Dlg_OnInitDialog (HWND hWnd, HWND hWndFocus, LPARAM lParam) {

   chSETDLGICONS(hWnd, IDI_SCHEDLAB);

   // Initialize process priority classes
   HWND hWndCtl = GetDlgItem(hWnd, IDC_PROCESSPRIORITYCLASS);

   int n = ComboBox_AddString(hWndCtl, TEXT("High"));
   ComboBox_SetItemData(hWndCtl, n, HIGH_PRIORITY_CLASS);

   // Save our current priority class
   DWORD dwpc = GetPriorityClass(GetCurrentProcess());

   if (SetPriorityClass(GetCurrentProcess(), BELOW_NORMAL_PRIORITY_CLASS)) {

      // This system supports the BELOW_NORMAL_PRIORITY_CLASS class

      // Restore our original priority class
      SetPriorityClass(GetCurrentProcess(), dwpc);

      // Add the Above Normal priority class
      n = ComboBox_AddString(hWndCtl, TEXT("Above normal"));
      ComboBox_SetItemData(hWndCtl, n, ABOVE_NORMAL_PRIORITY_CLASS);

      dwpc = 0; // Remember that this system supports below normal
   }

   int nNormal = n = ComboBox_AddString(hWndCtl, TEXT("Normal"));
   ComboBox_SetItemData(hWndCtl, n, NORMAL_PRIORITY_CLASS);

   if (dwpc == 0) {

      // This system supports the BELOW_NORMAL_PRIORITY_CLASS class

      // Add the Below Normal priority class
      n = ComboBox_AddString(hWndCtl, TEXT("Below normal"));
      ComboBox_SetItemData(hWndCtl, n, BELOW_NORMAL_PRIORITY_CLASS);
   }

   n = ComboBox_AddString(hWndCtl, TEXT("Idle"));
   ComboBox_SetItemData(hWndCtl, n, IDLE_PRIORITY_CLASS);

   ComboBox_SetCurSel(hWndCtl, nNormal);
<span class="beginpage" pagenum="200"><a name="414"></a><a name="IDX-2001C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
   // Initialize thread relative priorities
   hWndCtl = GetDlgItem(hWnd, IDC_THREADRELATIVEPRIORITY);

   n = ComboBox_AddString(hWndCtl, TEXT("Time critical"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_TIME_CRITICAL);

   n = ComboBox_AddString(hWndCtl, TEXT("Highest"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_HIGHEST);

   n = ComboBox_AddString(hWndCtl, TEXT("Above normal"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_ABOVE_NORMAL);

   nNormal = n = ComboBox_AddString(hWndCtl, TEXT("Normal"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_NORMAL);

   n = ComboBox_AddString(hWndCtl, TEXT("Below normal"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_BELOW_NORMAL);

   n = ComboBox_AddString(hWndCtl, TEXT("Lowest"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_LOWEST);

   n = ComboBox_AddString(hWndCtl, TEXT("Idle"));
   ComboBox_SetItemData(hWndCtl, n, THREAD_PRIORITY_IDLE);

   ComboBox_SetCurSel(hWndCtl, nNormal);

   Edit_LimitText(GetDlgItem(hWnd, IDC_SLEEPTIME), 4); // Maximum of 9999
   return(TRUE);
}


///////////////////////////////////////////////////////////////////////////////


void Dlg_OnCommand (HWND hWnd, int id, HWND hWndCtl, UINT codeNotify) {

   switch (id) {
      case IDCANCEL:
         PostQuitMessage(0);
         break;

      case IDC_PROCESSPRIORITYCLASS:
         if (codeNotify == CBN_SELCHANGE) {
            SetPriorityClass(GetCurrentProcess(), (DWORD)
               ComboBox_GetItemData(hWndCtl, ComboBox_GetCurSel(hWndCtl)));
         }
         break;

      case IDC_THREADRELATIVEPRIORITY:
         if (codeNotify == CBN_SELCHANGE) {
            SetThreadPriority(GetCurrentThread(), (DWORD)
               ComboBox_GetItemData(hWndCtl, ComboBox_GetCurSel(hWndCtl)));
         }
         break;
<span class="beginpage" pagenum="201"><a name="415"></a><a name="IDX-2011C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
      case IDC_SUSPEND:
         // To avoid deadlock, call EnableWindow before creating
         // the thread that calls SuspendThread.
         EnableWindow(hWndCtl, FALSE);

         HANDLE hThreadPrimary;
         DuplicateHandle(GetCurrentProcess(), GetCurrentThread(),
            GetCurrentProcess(), &amp;hThreadPrimary,
            THREAD_SUSPEND_RESUME, FALSE, DUPLICATE_SAME_ACCESS);
         DWORD dwThreadID;
         CloseHandle(chBEGINTHREADEX(NULL, 0, ThreadFunc,
            hThreadPrimary, 0, &amp;dwThreadID));
         break;
   }
}


///////////////////////////////////////////////////////////////////////////////


INT_PTR WINAPI Dlg_Proc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

   switch (uMsg) {
      chHANDLE_DLGMSG(hWnd, WM_INITDIALOG, Dlg_OnInitDialog);
      chHANDLE_DLGMSG(hWnd, WM_COMMAND,    Dlg_OnCommand);
   }

   return(FALSE);
}


///////////////////////////////////////////////////////////////////////////////


class CStopwatch {
public:
   CStopwatch() { QueryPerformanceFrequency(&amp;m_liPerfFreq); Start(); }

   void Start() { QueryPerformanceCounter(&amp;m_liPerfStart); }

   __int64 Now() const { // Returns # of milliseconds since Start was called
      LARGE_INTEGER liPerfNow;
      QueryPerformanceCounter(&amp;liPerfNow);
      return(((liPerfNow.QuadPart - m_liPerfStart.QuadPart) * 1000)
         / m_liPerfFreq.QuadPart);
   }

private:
   LARGE_INTEGER m_liPerfFreq;   // Counts per second
   LARGE_INTEGER m_liPerfStart;  // Starting count
};
<span class="beginpage" pagenum="202"><a name="416"></a><a name="IDX-2021C4AB577-C32E-4A16-BF0F-07F3124E103E"></a></span>
__int64 FileTimeToQuadWord (PFILETIME pft) {
   return(Int64ShllMod32(pft-&gt;dwHighDateTime, 32) | pft-&gt;dwLowDateTime);
}




int WINAPI _tWinMain(HINSTANCE hInstExe, HINSTANCE, PTSTR pszCmdLine, int) {

   HWND hWnd =
      CreateDialog(hInstExe, MAKEINTRESOURCE(IDD_SCHEDLAB), NULL, Dlg_Proc);
   BOOL fQuit = FALSE;

   while (!fQuit) {
      MSG msg;
      if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) {

         // IsDialogMessage allows keyboard navigation to work properly.
         if (!IsDialogMessage(hWnd, &amp;msg)) {

            if (msg.message == WM_QUIT) {
               fQuit = TRUE; // For WM_QUIT, terminate the loop.
            } else {
               // Not a WM_QUIT message. Translate it and dispatch it.
               TranslateMessage(&amp;msg);
               DispatchMessage(&amp;msg);
            }
          } // if (!IsDialogMessage())
      } else {

         // Add a number to the listbox
         static int s_n = -1;
         TCHAR sz[20];
         StringCChPrintf(sz, _countof(sz), TEXT("%u"), ++s_n);
         HWND hWndWork = GetDlgItem(hWnd, IDC_WORK);
         ListBox_SetCurSel(hWndWork, ListBox_AddString(hWndWork, sz));

        // Remove some strings if there are too many entries
        while (ListBox_GetCount(hWndWork) &gt; 100)
           ListBox_DeleteString(hWndWork, 0);

        // How long should the thread sleep
        int nSleep = GetDlgItemInt(hWnd, IDC_SLEEPTIME, NULL, FALSE);
        if (chINRANGE(1, nSleep, 9999))
           Sleep(nSleep);
      }
   }

   DestroyWindow(hWnd);
   return(0);
}


//////////////////////////////// End of File //////////////////////////////////
</pre>
</div>
<table class="BlueLine" border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td bgcolor="000080" class="bluecell"><font size="2" face="Arial" color="010100"><b><img alt="Image from book" src="_.gif" width="1" height="2" title="End example" border="0"></b></font></td>
</tr>
</table>
<table class="BlankSpace" border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td height="16"></td>
</tr>
</table>
</div>
</div>
</div>
</div>
<span class="beginpage" pagenum=""></span>
</div>
</div>
</div><TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>
<TD COLSPAN="3" HEIGHT="5"><IMG SRC="images/_.gif" WIDTH="1" ALT="" BORDER="0" HEIGHT="5"></TD>
</TR>
<TR>
<TD CLASS="b24-chunknavigate" WIDTH="25%" ALIGN="left"><A BORDER="0" HREF="514488884.htm"><IMG SRC="images/arrow_readprevious.gif" WIDTH="94" HEIGHT="22" HSPACE="0" ALT="Previous Section" TITLE="Previous Section" BORDER="0"></A></TD>
<TD CLASS="b24-chunknavigate" WIDTH="75%" ALIGN="center">
<TABLE CELLPADDING="0" CELLSPACING="0" BORDER="0">
<TR HEIGHT="11">
<TD WIDTH="6"><IMG WIDTH="6" HEIGHT="11" BORDER="0" SRC="images/progress_left.gif" ALT="Progress:"></TD>
<TD BACKGROUND="images/progress_bar.gif" WIDTH="300"><IMG HEIGHT="11" BORDER="0" SRC="images/_.gif" ALIGN="Left" WIDTH="76" ALT="Progress:"><IMG WIDTH="9" HEIGHT="11" BORDER="0" SRC="images/progress_marker.gif" ALIGN="Left" ALT="Progress: 26%"></TD>
<TD WIDTH="6"><IMG WIDTH="6" HEIGHT="11" BORDER="0" SRC="images/progress_right.gif" ALT="Progress:"></TD>
</TR>
</TABLE>
</TD>
<TD CLASS="b24-chunknavigate" WIDTH="25%" ALIGN="right"><A BORDER="0" HREF="viewer.asp?bookid=22940&amp;chunkid=389821297"><IMG WIDTH="1" HEIGHT="1" HSPACE="1" BORDER="0" ALT="" SRC="images/_.gif"></A><A BORDER="0" HREF="475409944.htm"><IMG SRC="images/arrow_readnext.gif" WIDTH="94" HEIGHT="22" HSPACE="0" ALT="Next Section" TITLE="Next Section" BORDER="0"></A></TD>
</TR>
<TR>
<TD COLSPAN="3" HEIGHT="5"><IMG SRC="images/_.gif" WIDTH="1" ALT="" BORDER="0" HEIGHT="5"></TD>
</TR>
</TABLE>

<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0" WIDTH="100%" BGCOLOR="#FFFFFF" HEIGHT="50">
<TR><TD BGCOLOR="#000000"><IMG SRC="images/_.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0"></TD></TR>
<TR><TD><?xml version="1.0" encoding="ISO-8859-1"?><TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0"><TR><TD WIDTH="99%" VALIGN="Top" CLASS="footer"><P CLASS="b24-footer">Use of content on this site is expressly subject to the restrictions set forth in the <A HREF="../../help.asp@item=membership" TARGET="_parent" CLASS="b24-footlink">Membership Agreement</A>.
    <BR />Books24x7 and Referenceware are registered trademarks of Books24x7, Inc.
    <BR />
  Copyright © 1999-2008 Books24x7, Inc.
 - <A HREF="../../feedback.asp" TARGET="_parent">Feedback</A> | <A HREF="../../help.asp@item=privacy" TARGET="_parent">Privacy Policy (updated 03/2005)</A></P></TD></TR></TABLE></TD></TR>
</BODY>
</HTML>
